{"meta":{"title":"frogman","subtitle":"frogman","description":"frogman space","author":"Allen.S","url":"http://Frogman1s.github.io","root":"/"},"pages":[{"title":"","date":"2022-10-31T16:10:20.553Z","updated":"2022-10-31T16:10:20.553Z","comments":true,"path":"docs/index.html","permalink":"http://frogman1s.github.io/docs/index.html","excerpt":"","text":"2022.8.19广州·天河 2022·广州塔"},{"title":"所有分类","date":"2022-10-30T13:28:00.427Z","updated":"2022-10-30T06:25:56.278Z","comments":true,"path":"categories/index.html","permalink":"http://frogman1s.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板🍃","date":"2022-11-16T05:03:16.759Z","updated":"2022-11-16T05:03:16.759Z","comments":true,"path":"about/index.html","permalink":"http://frogman1s.github.io/about/index.html","excerpt":"","text":"🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🐸欢迎留言:道行尚浅的程序员🦭🏃🏻🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️🏃🏻‍️‍️#爱吃食物的男孩子👦 #自律"},{"title":"友链","date":"2022-10-30T13:28:00.439Z","updated":"2022-10-30T04:50:30.268Z","comments":true,"path":"friends/index.html","permalink":"http://frogman1s.github.io/friends/index.html","excerpt":"人生未易相逢春潮带雨晚来急,野渡无人舟自横","text":"人生未易相逢春潮带雨晚来急,野渡无人舟自横 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。如何自助添加友链？先友后链，在我们有一定了解了之后才可以交换友链，除此之外，您的网站还应满足以下条件： 合法的、非营利性、无商业广告有实质性原创内容的 HTTPS 站点第一步：新建 Issue 新建 GitHub Issue 按照模板格式填写并提交。 为了提高图片加载速度，建议优化头像： 打开 压缩图 上传自己的头像，将图片尺寸调整到 96px 后下载。将压缩后的图片上传到 ImgURL 免费图床 并使用此图片链接作为头像。第二步：添加友链并等待管理员审核 请添加本站到您的友链中，如果您也使用 issue 作为友链源，只需要告知您的友链源仓库即可。 您可以添加本站的任何一个域，下面只是一个例子。 title: Frogman1savatar:https://avatars.githubusercontent.com/u/80079743?s=400&amp;u=2225e0312791a9b2b3eb15568e80f2138d14ee89&amp;v=4url: https://Frogman1s.github.iodescription: 「Be Yourself Make a Difference」keywords: 搞事情🤣待管理员审核通过，添加了 active 标签后，回来刷新即可生效。"}],"posts":[{"title":"Mysql事务,关于事务的ACID性质","slug":"mysql事务","date":"2022-12-07T14:09:34.407Z","updated":"2022-12-08T08:57:27.484Z","comments":true,"path":"2022/12/07/mysql事务/","link":"","permalink":"http://frogman1s.github.io/2022/12/07/mysql%E4%BA%8B%E5%8A%A1/","excerpt":"","text":"Mysql事务1.事务定义事务：事务(Transaction)是一个最小的不可在分的工作单元;通常一个事务对应一个完整的业务(例如银行账户转账业务,该业务是一个最小的工作单元)一个完整的业务需要批量的DML(insert、update、delete)语句共同联合完成.事务只和DML语句有关,或者说DML语句才有事务.这个和业务逻辑有关,业务逻辑不同,DML语句的个数不同. 目前常用的存储引擎有InnoDB(MySQL5.5以后默认的存储引擎)和MyISAM(MySQL5.5之前默认的存储引擎),其中InnoDB支持事务处理机制，而MyISAM不支持. 2.事务的四大特性(ACID)事务有四个特性：原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)和持久性(Durability) 1.原子性:事务中的所有操作可以看做一个原子,事务是应用中不可再分的最小的逻辑执行体. 使用事务对数据进行修改的操作序列,要么全部执行,要么全不执行. 2.一致性:一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库中只包含事务成功提交的结果时，数据库处于一致性状态。一致性是通过原子性来保证的。 3.隔离性:隔离性是指各个事务的执行互不干扰，任意一个事务的内部操作对其他并发的事务，都是隔离的。也就是说：并发执行的事务之间既不能看到对方的中间状态，也不能相互影响。 4.持久性:持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中，通常是保存进物理数据库，即使数据库出现故障，提交的数据也应该能够恢复。但如果是由于外部原因导致的数据库故障，如硬盘被损坏，那么之前提交的数据则有可能会丢失。 事务acid特性的实现主要依赖各种log(日志)和锁 其中原子性依赖undolog,隔离性依赖锁,持久性依赖redolog 原子性,隔离性和持久性共同实现了事务的一致性 3.日志MySQL 中有七种日志文件,分别是：重做日志（redo log）、回滚日志（undo log）、二进制日志（binlog）、错误日志（errorlog）、慢查询日志（slow query log）、一般查询日志（general log），中继日志（relay log）. 日志的几个知识点1.binlog作用 复制：MySQL 主从复制在 Master 端开启 binlog，Master 把它的二进制日志传递给 slaves 并回放来达到 master-slave 数据一致的目的 数据恢复：通过 mysqlbinlog 工具恢复数据 binlog 不会记录不修改数据的语句，比如Select或者Show binlog 会重写日志中的密码，保证不以纯文本的形式出现MySQL 8 之后的版本可以选择对 binlog 进行加密 具体的写入时间：在事务提交的时候,数据库会把 binlog cache 写入 binlog 文件中,但并没有执行fsync()操作,即只将文件内容写入到 OS 缓存中.随后根据配置判断是否执行 fsync(). 删除时间：保持时间由参数expire_logs_days配置，也就是说对于非活动的日志文件，在生成时间超过expire_logs_days配置的天数之后，会被自动删除。 格式binlog 日志有三种格式，分别为 STATMENT 、 ROW 和 MIXED。 STATMENT：基于SQL 语句的复制( statement-based replication, SBR )，每一条会修改数据的sql语句会记录到binlog 中 。 优点：不需要记录每一行的变化，减少了 binlog 日志量，节约了 IO , 从而提高了性能；缺点：主从复制时，存在部分函数（如 sleep）及存储过程在 slave 上会出现与 master 结果不一致的情况。ROW：****基于行的复制(row-based replication, RBR )，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了 。 优点：因此不会发生某些特定情况下的存储过程、函数或者触发器的调用触发无法被正确复制的问题。缺点：会产生大量的日志，尤其是alter table 的时候，由于表结构修改，每条记录都发生改变，那么该表每一条记录都会记录到日志中，实际等于重建了表。*MIXED：***基于STATMENT 和 ROW 两种模式的混合复制(**mixed-based replication, MBR )，一般的复制使用STATEMENT 模式保存 binlog ，对于 STATEMENT 模式无法复制的操作使用 ROW 模式保存 binlog。 主从复制复制是 MySQL 最重要的功能之一，MySQL 集群的高可用、负载均衡和读写分离都是基于复制来实现。复制步骤如下： 1.Master 将数据改变记录到二进制日志(binary log)中。 2.Slave 上面的 IO 进程连接上 Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容。 3.Master 接收到来自 Slave 的 IO 进程的请求后，负责复制的 IO 进程会根据请求信息读取日志指定位置之后的日志信息，返回给 Slave 的 IO 进程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到 Master 端的 binlog 文件的名称以及 binlog 的位置。 4.Slave 的 IO 进程接收到信息后，将接收到的日志内容依次添加到 Slave 端的 relaylog 文件的最末端，并将读取到的 Master 端的 binlog 的文件名和位置记录到 masterinfo 文件中，以便在下一次读取的时候能够清楚的告诉 Master 从某个 binlog 的哪个位置开始往后的日志内容。 5.Slave 的 SQL 进程检测到 relaylog 中新增加了内容后，会马上解析 relaylog 的内容成为在 Master 端真实执行时候的那些可执行的内容，并在自身执行。 2.redologredolog 包括两部分：一个是内存中的日志缓冲( redolog buffer ),另一个是磁盘上的日志文件( redologfile). mysql 每执行一条 DML 语句,先将记录写入 redolog buffer,后续某个时间点再一次性将多个操作记录写到 redolog file.这种 先写日志,再写磁盘 的技术就是 MySQL里经常说到的 WAL(Write-Ahead Logging) 技术。 1.事务提交后不需要每一次都把数据写入磁盘中，先写到redolog日志中，然后写入磁盘。 2.redolog 和写表的区别就在于随机写和顺序写。MySQL 的表数据是随机存储在磁盘中的，而 redolog 是一块固定大小的连续空间。而磁盘顺序写入要比随机写入快几个数量级。 mysql 支持三种将 redo log buffer 写入 redo log file 的时机,延迟写、实时写实时刷、实时写延迟刷 3.undolog事务的原子性底层就是通过 undolog 实现的,undo log主要记录了数据的逻辑变化,比如一条 INSERT 语句,对应一条DELETE 的 undolog ,对于每个 UPDATE 语句,对应一条相反的 UPDATE 的 undolog ,这样在发生错误时,就能回滚到事务之前的数据状态.同时，,undolog 也是 MVCC(多版本并发控制)实现的关键. 实现步骤 事务1:当我门新增一条记录,mysql在基本表后面自动生成隐藏字段(trx_id&#x3D;1,roll_ptr&#x3D;null,row_id&#x3D;1),如图 事务2:对表name字段修改,生成undolog,新记录的roll_ptr的值是undolog头节点位置,最新记录和undolog之间用版本链链接,如图 事务3:修改age字段,结果如图 通过上述的图示，我们发现undolog最终会变成一个链表，链首表示的是最新的旧纪录，链尾表示的是最旧的旧纪录，undolog链表不会无限增加，后台会有一个purge的线程来对undo log进行维护，当不需要的时候会进行删除，在undolog删除的时候会分为两类，insert对应一类undolog，只要事务提交就可以删除，update、delete对应一类undolog，除了事务提交之外，还要保证mvcc不用才会删除 4.errorlog用来记录 MySQL 服务器运行过程中的错误信息,默认开启无法关闭.复制环境下，从服务器进程的信息也会被记录进错误日志 5.slowlogMySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的SQL语句，具体是指运行时间超过 long_query_time 值的SQL，这样的SQL则会被记录到慢查询日志中。long_query_time 的默认值为10，意思是运行10S以上的SQL语句。 默认情况下，MySQL数据库并没有开启慢查询日志，需要我们手动来设置这个参数。当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表. 6.relaylog中继日志用于主从复制架构中的从服务器上，从服务器的 slave 进程从主服务器处获取二进制日志的内容并写入中继日志，然后由 IO 进程读取并执行中继日志中的语句. 4.MVCC全称multi-version Concurency control,多版本并发控制，是为了解决并发读写问题存在的MVCC的实现原理由三部分组件完成：隐藏字段，undolog，readview 1.数据库并发有以下几种场景： 读-读：不存在任何问题。读-写：有线程安全问题，可能出现脏读、幻读、不可重复读。写-写：有线程安全问题，可能存在更新丢失等。 mvcc解决的就是读写时的线程安全问题，线程不用去争抢读写锁。 mvcc所提到的读是快照读，也就是普通的select语句。快照读在读写时不用加锁，不过可能会读到历史数据。 还有一种读取数据的方式是当前读，是一种悲观锁的操作。它会对当前读取的数据进行加锁，所以读到的数据都是最新的。主要包括以下几种操作： select lock in share mode（共享锁）select for update（排他锁）update（排他锁）insert（排他锁）delete（排他锁） 2.MVCC实现方式mvcc的实现，基于undolog、版本链、readview。 undolog mysql所对应的行记录除了我们自定义的字段之外，mysql会默认的添加一些隐藏字段，对于用户是不可见的 readview readview：表示事务进行快照读操作的时候产生的读视图，在该事务进行快照读的那一刻会生成一个系统当前的快照，但是此时的快照不是数据的快照，而是事务相关信息的快照 基本参数: readview算法 1、首先比较DB_TRX_ID &lt; up_limit_id,如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断 2、接下来判断DB_TRX_ID &gt;&#x3D; low_limit_id,如果大于等于则代表DB_TRX_ID所在的记录在Read View生成后才出现的，那么对于当前事务肯定不可见，如果小于，则进入下一步判断 3、判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit，修改的数据，当前事务也是看不到，如果不在，则说明这个事务在Read View生成之前就已经开始commit，那么修改的结果是能够看见的。 案例演示 案例1: 案例2: 分析: ​ … 通过观察，可见性算法和readview的值都没有变，但是实验的结果却不同，所以在执行过程中肯定有些数据是发生变化的，可见性算法是固定死的，唯一可能变的就是readview，大胆的做一个假设，假设橙色部分使用的readview并没有重新生成，而是沿用了绿色部分的readview，我们来验证实验的结果是啥？ 经过分析发现跟我们的实验结果是保持一致的，那么就说明第二次在进行快照读的时候沿用了第一个的readview 1.在RC隔离级别的时候，每一次进行快照读都会生成新的readview2.在RR隔离级别的时候，只有在第一次进行快照读的时候才会生成readview，之后的快照读都会沿用之前的readview，不会重新生成 **3.两个隔离级别的区别点在与生成readview的时机不同** RR隔离级别解决了不可重复读的问题，RC隔离级别解决了幻读的问题","categories":[{"name":"mysql","slug":"mysql","permalink":"http://frogman1s.github.io/categories/mysql/"}],"tags":[]},{"title":"如何解决并发场景下扣款的数据一致性问题？","slug":"如何解决并发场景下扣款的数据一致性问题？","date":"2022-11-27T07:54:53.441Z","updated":"2022-11-27T08:45:11.541Z","comments":true,"path":"2022/11/27/如何解决并发场景下扣款的数据一致性问题？/","link":"","permalink":"http://frogman1s.github.io/2022/11/27/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E6%89%A3%E6%AC%BE%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%9F/","excerpt":"","text":"1、场景介绍场景1：扣费，企业账户送流量或者红包，用户签到领取。此场景下就是多用户对某一个账号的并发扣款； 场景2：充值，打赏给主播，这种场景是多用户对同一个账号进行打款，但是方案和问题和场景1是一致的。 2、场景举例假设有两个业务操作同一个账号，账号余额为100，业务1扣除50，业务2扣除40，如果顺利应该是剩余100-50-40&#x3D;10，那么我们看如下并发操作的场景： 通过两个业务的并发操作，最后账户余额为60（是业务2最后修改后的余额值）。 3、解决方案3.1 悲观锁 概念:要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制【Pessimistic Concurrency Control，缩写“PCC”，又名“悲观锁”】。 悲观锁的实现 传统的关系型数据库使用这种锁机制，比如行锁、表锁、读锁、写锁等，都是在操作之前先上锁。 Java 里面的同步 synchronized关键字的实现。 悲观锁主要分为共享锁和排他锁 共享锁【shared locks】又称为读锁，简称 S 锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。 排他锁【exclusive locks】又称为写锁，简称 X 锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁。获取排他锁的事务可以对数据行读取和修改。 在查询语句加 for update，行记录加上排它锁，这样后来的事务会阻塞查询，这样就避免了数据不一致。 12345678910111213//开始事务begin;//消费金额$spend = 10;//查询用户余额$user = select id,money from t_account where id = #&#123;id&#125; for update;//计算金额$newMoney = $user[&#x27;money&#x27;]-$spend;//.. 这里检查余额是否足够//更新余额update t_account set money = $newMoney where id = #&#123;id&#125; ;//确认成功之后 提交事务commit 3.2 乐观锁 概念乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。 乐观锁采取了更加宽松的加锁机制。也是为了避免数据库幻读、业务处理时间过长等原因引起数据处理错误的一种机制，但乐观锁不会刻意使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性。乐观锁的实现： CAS 实现：Java 中java.util.concurrent.atomic包下面的原子变量使用了乐观锁的一种 CAS 实现方式。 版本号控制：一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会 +1。当线程 A 要更新数据时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值与当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。 通过CAS操作，即旧值和预期值相同时执行修改，例如： update t_account set money=#&#123;new_money&#125; where id=#&#123;id&#125;; 修改为： Update t_account set money=#&#123;new_money&#125; where id=#&#123;id&#125; and money=#&#123;old_money&#125;; 这样在并发情况下，只能有一个修改成功，affect row为1；其他事务由于money不等于旧值，修改失败，affect row为0。 3.3 为什么不使用减等于的sql操作 例如 : update t_account set money= money - $spend where id = #&#123;id&#125; ; 这里要再加上余额的判断避免出现负数金额： Update t_account set money= money- $spend where id = #&#123;id&#125;&#125; and money&gt;= $spend ; 稍微改一下这里的更新语句也能完成正确的更新就算是并发也都将正常。 但是这样做将产生一个问题不幂等。 什么是不幂等 ? 在相同的条件下，执行同一请求，得到的结果相同才符合幂等性。 如果是money&#x3D; money- $spend的操作在多次操作场景下就会产生重复扣款。 3.4 ABA问题 ABA问题是由CAS衍生来的，在并发极端情况下会产生，那么什么是ABA问题？ 标准的描述如下： 并发1（上）：获取出数据的初始值是A，后续计划实施CAS乐观锁，期望数据仍是A的时候，修改才能成功； 并发2：将数据修改成B； 并发3：将数据修改回A。 并发1（下）：CAS乐观锁，检测发现初始值还是A，进行数据修改。 上述并发环境下，并发1在修改数据时，虽然还是A，但已经不是初始条件的A了，中间发生了A变B，B又变A的变化，此A已经非彼A，数据却成功修改，可能导致错误，这就是CAS引发的所谓的ABA问题。 举一个游戏充值例子，如下： 按照业务的诉求，事务3是最终将数据库结果值恢复为100，但是通过cas比较更新最终结果出现了40，这个就是ABA导致的问题。 我们还是以前面的sql作为例子讲解ABA问题如何解决？ 1、数据库表结构由(id、money)修改为(id、money、version) 2、数据库查询由之前的： select money from t_account where id=#&#123;id&#125; 修改为： select money,version from t_account where id=$&#123;id&#125; 3、数据库修改除了cas比较外，还需要版本相同，并且进行版本修改： update t_account set money=#&#123;new_money&#125; where id=#&#123;id&#125; and money=#&#123;old_money&#125;; 修改为： update t_account set money=#&#123;new_money&#125; where id=#&#123;id&#125; and money=#&#123;old_money&#125; and version=#&#123;version_old&#125; 4、总结select&amp;set业务场景，在并发时会出现一致性问题； 基于“值”的CAS乐观锁，可能导致ABA问题； 不能采用减等于的sql操作，由于此操作不幂等； CAS乐观锁，必须保证修改时的“此数据”就是“彼数据”，应该由“值”比对，优化为“版本号”比对。","categories":[{"name":"java","slug":"java","permalink":"http://frogman1s.github.io/categories/java/"},{"name":"mysql","slug":"mysql","permalink":"http://frogman1s.github.io/categories/mysql/"},{"name":"并发","slug":"并发","permalink":"http://frogman1s.github.io/categories/%E5%B9%B6%E5%8F%91/"}],"tags":[]},{"title":"ubuntu服务器ssh配置并完成内网穿透","slug":"ubuntu服务器ssh配置并完成内网穿透","date":"2022-11-01T03:46:59.420Z","updated":"2022-11-01T04:02:33.971Z","comments":true,"path":"2022/11/01/ubuntu服务器ssh配置并完成内网穿透/","link":"","permalink":"http://frogman1s.github.io/2022/11/01/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%85%8D%E7%BD%AE%E5%B9%B6%E5%AE%8C%E6%88%90%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","excerpt":"","text":"ubuntu服务器ssh配置并完成内网穿透基本介绍:物理服务器已经安装ubuntu18.04.需要配置ssh实现内网登录,并且使用内网穿透实现公网远程访问. 注意:如果你只是想登陆别的机器的SSH只需要安装openssh-client(ubuntu有默认安装，如果没有则sudo apt-get install openssh-client)，如果要使本机开放SSH服务就需要安装openssh-server 一、配置ssh实现内网登录:1.安装ssh-server:1sudo apt-get install openssh-server 2.启动ssh服务:1sudo /etc/init.d/ssh start或sudo service ssh start 3.设置允许远程root用户登录:1sudo vim /etc/ssh/sshd_config 搜索找到PermitRootLogin 加入配置 PermitRootLogin yes 4.重启SSH服务：12sudo /etc/init.d/ssh stopsudo /etc/init.d/ssh start 5.登陆SSH同一局域网内其他机器可以输入命令实现访问,内网访问 ssh 服务器名字@内网ip注意:不知道服务器IP地址可输入ifconfig查看,如果找不到命令请先输入 1sudo apt install net-tools 安装net-tools. 二、内网穿透,实现公网访问介绍:上述方式已经实现同一局域网内对ubuntu服务器的访问,客户端一旦离开该局域网就会失去连接,如果想要实现在家里,咖啡厅或者其他地方随时随地对服务器访问该怎么办呢?在ipv4公网IP资源枯竭的情况下，运营商基本不会分配公网IP。而想要实现公网访问内网&#x2F;局域网，普遍是通过内网穿透来实现。本文使用cpolar完成内网穿透，支持http&#x2F;https&#x2F;tcp协议，可免费使用，并且不限制流量。能够将本地端口映射到公网上，生成公网，实现外网任意地点远程访问内网。 1.安装cpolar1curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash 注意:如果没有curl请按照提示安装curl 2.查看cpolar版本信息1cpolar version 3.注册登录cpolar获取Authtoken复制你的token 1cpolar authtoken xxxxxxx(你的token) 4.向系统添加服务1sudo systemctl enable cpolar 5.启动cpolar服务1sudo systemctl start cpolar 6.查看服务状态1sudo systemctl status cpolar 7.开启穿透要在端口80上启动HTTP隧道，请运行以下命令： 1cpolar http 80 8.获取ssh隧道的公网地址登录cpolar web UI管理界面 在浏览器访问：http://localhost:9200/，输入所注册的cpolar账号密码，登录cpolar web UI管理界面 控制端电脑打开终端命令行，输入命令，远程ssh访问局域网内的ubuntu。 如cpolar已经将本地22端口映射到了xxxx端口，所以，ssh命令需要加-p参数，后面加公网隧道端口号(具体端口号在url的:后面) 1ssh -p XXXXX 用户名@1.tcp.vip.cpolar.cn（X为cpolar生成的端口号，用户名替换为主机用户名） 在输入正确的命令后，Ubuntu会出现提示信息，询问是否确定连接该端口，并要求输入Ubuntu系统的密码，此时分别输入“yes”和ubunt系统密码即可。 注意:cpolar免费版24小时更新一次公网ip,记得修改命令里的ip参数.详情见文档","categories":[{"name":"linux","slug":"linux","permalink":"http://frogman1s.github.io/categories/linux/"},{"name":"ssh","slug":"linux/ssh","permalink":"http://frogman1s.github.io/categories/linux/ssh/"},{"name":"cploar","slug":"cploar","permalink":"http://frogman1s.github.io/categories/cploar/"}],"tags":[]},{"title":"Swagger2入门","slug":"Swagger2","date":"2022-10-30T08:01:12.324Z","updated":"2022-10-30T08:01:12.324Z","comments":true,"path":"2022/10/30/Swagger2/","link":"","permalink":"http://frogman1s.github.io/2022/10/30/Swagger2/","excerpt":"","text":"4. Swagger2 4.1 简介Swagger 是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 Rest API。 4.2 为什么使用Swagger当下很多公司都采取前后端分离的开发模式，前端和后端的工作由不同的工程师完成。在这种开发模式下， 维持一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。 传统意义上的文档都是后端开发人员手动编写的，相信大家也都知道这种方式很难保证文档的及时性， 这种文档久而久之也就会失去其参考意义，反而还会加大我们的沟通成本。 而 Swagger 给我们提供了一个全新的维护 API 文档的方式，下面我们就来了解一下它的优点： 1.代码变，文档变。只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性。2.跨语言性，支持 40 多种语言。3.Swagger UI 呈现出来的是一份可交互式的 API 文档，我们可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程。 4.3 快速入门4.3.1 引入依赖123456789&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;&lt;/dependency&gt; 4.3.2 启用Swagger2在启动类上或者配置类加 @EnableSwagger2 注解 123456789@SpringBootApplication@MapperScan(&quot;com.sangeng.mapper&quot;)@EnableScheduling@EnableSwagger2public class SanGengBlogApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SanGengBlogApplication.class,args); &#125;&#125; 4.3.3 测试访问：http://localhost:7777/swagger-ui.html 注意其中localhost和7777要调整成实际项目的域名和端口号。 4.4 具体配置4.4.1 Controller配置4.4.1 @Api 注解属性介绍： tags 设置标签 description 设置描述信息 12345@RestController@RequestMapping(&quot;/comment&quot;)@Api(tags = &quot;评论&quot;,description = &quot;评论相关接口&quot;)public class CommentController &#123;&#125; 4.4.2 接口配置4.4.2.1 接口描述配置@ApiOperation12345@GetMapping(&quot;/linkCommentList&quot;)@ApiOperation(value = &quot;友链评论列表&quot;,notes = &quot;获取一页友链评论&quot;)public ResponseResult linkCommentList(Integer pageNum,Integer pageSize)&#123; return commentService.commentList(SystemConstants.LINK_COMMENT,null,pageNum,pageSize);&#125; 4.4.2.2 接口参数描述 @ApiImplicitParam 用于描述接口的参数，但是一个接口可能有多个参数，所以一般与 @ApiImplicitParams 组合使用。 12345678910@GetMapping(&quot;/linkCommentList&quot;)@ApiOperation(value = &quot;友链评论列表&quot;,notes = &quot;获取一页友链评论&quot;)@ApiImplicitParams(&#123; @ApiImplicitParam(name = &quot;pageNum&quot;,value = &quot;页号&quot;), @ApiImplicitParam(name = &quot;pageSize&quot;,value = &quot;每页大小&quot;)&#125;)public ResponseResult linkCommentList(Integer pageNum,Integer pageSize)&#123; return commentService.commentList(SystemConstants.LINK_COMMENT,null,pageNum,pageSize);&#125; 4.4.3 实体类配置4.4.3.1 实体的描述配置@ApiModel@ApiModel用于描述实体类。 1234567@Data@AllArgsConstructor@NoArgsConstructor@ApiModel(description = &quot;添加评论dto&quot;)public class AddCommentDto&#123; //..&#125; 4.4.3.2 实体的属性的描述配置@ApiModelProperty@ApiModelProperty用于描述实体的属性 12@ApiModelProperty(notes = &quot;评论类型（0代表文章评论，1代表友链评论）&quot;)private String type; 4.4.4 文档信息配置123456789101112131415161718192021@Configurationpublic class SwaggerConfig &#123; @Bean public Docket customDocket() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(&quot;com.sangeng.controller&quot;)) .build(); &#125; private ApiInfo apiInfo() &#123; Contact contact = new Contact(&quot;团队名&quot;, &quot;http://www.my.com&quot;, &quot;my@my.com&quot;); return new ApiInfoBuilder() .title(&quot;文档标题&quot;) .description(&quot;文档描述&quot;) .contact(contact) // 联系方式 .version(&quot;1.1.0&quot;) // 版本 .build(); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://frogman1s.github.io/categories/java/"},{"name":"测试","slug":"测试","permalink":"http://frogman1s.github.io/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[]}],"categories":[{"name":"mysql","slug":"mysql","permalink":"http://frogman1s.github.io/categories/mysql/"},{"name":"java","slug":"java","permalink":"http://frogman1s.github.io/categories/java/"},{"name":"并发","slug":"并发","permalink":"http://frogman1s.github.io/categories/%E5%B9%B6%E5%8F%91/"},{"name":"linux","slug":"linux","permalink":"http://frogman1s.github.io/categories/linux/"},{"name":"ssh","slug":"linux/ssh","permalink":"http://frogman1s.github.io/categories/linux/ssh/"},{"name":"cploar","slug":"cploar","permalink":"http://frogman1s.github.io/categories/cploar/"},{"name":"测试","slug":"测试","permalink":"http://frogman1s.github.io/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[]}